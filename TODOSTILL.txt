cntrl-c  

leak for $? found

<<<<<<< HEAD
 signals need work
 heredoc Should work like bash
 

x 1. mkdir tmp
2. cd tmp
3. cp /bin/ls .
4. unset PATH (now minishell should look for commands in the current working directory)
5. ls => should work
6. ./ls => should work
7. cat => command not found

x Relative / Absolute path should be working too. eg
1. ./ls
2. /bin/ls

x 1. "" (literally execute "")
2. should be command not found


--> implement check for command token with ./ at beginning (if it is an executable program)
1. mkdir foo
2. ./foo
3. minishell: ./foo: Is a directory
4. Exit code is 126

????????????????????????????
1.
cat << EOF > test
> #!/bin/does-not-exist
> some code
> EOF
2. ./test
3. execve should return an error which you need to handle:
4. bash: ./test: /bin/does-not-exist: bad interpreter: No such file or directory

x 1. env -i ./minishell
2. should work, no segfault

x 1. cat
2. CTRL+C
3. Prompt should not be printed twice

x 1. echo "$USER$USER"
2. should be one argument like `mafurnicmafurnic` not two separates, so not `mafurnic mafurnic`

x 1. echo "$USER $"

x 1. echo "$USER $PWD $USER"

x 1. echo $"USER"

x 1. echo $ "USER" --> one space missing

x 1. No expansion should happen in single quotes
2. echo '$USER'
3. Should print: $USER


x CTRL+C does nto work
=======
should promt and be ready to execute right away.


>>>>>>> Quotes

enter empty command -> exit code should be 0


leaks

<<<<<<< HEAD
Some more protections using funcheck
isalum needs ft_isalum but not from libft , that one is altered for another function,
=======
>>>>>>> Quotes
